---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.4}
  build: ./airflow/
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    POSTGRES_PASSWORD: 'postgres'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: 'root' # "${AIRFLOW_UID:-50000}:0"
  networks:
  - services
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - services

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - services

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    environment:
        <<: *airflow-common-env
        KAFKA_BROKER_URLS: "kafka_first:9091,kafka_second:9092,kafka_third:9093"
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    container_name: flower
    command: celery flower --profile
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  zookeeper_first:
      image: confluentinc/cp-zookeeper:7.6.0
      hostname: zookeeper_first
      container_name: zookeeper_first
      ports:
        - 2181:2181
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
        ZOOKEEPER_SERVER_ID: 1
        ZOOKEEPER_SERVERS: "zookeeper_first:22888:23888;zookeeper_second:22888:23888;zookeeper_third:22888:23888"
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - services
      volumes:
        - ./data/zoo_first/data:/var/lib/zookeeper/data
        - ./data/zoo_first/log:/var/lib/zookeeper/log

  zookeeper_second:
      image: confluentinc/cp-zookeeper:7.6.0
      hostname: zookeeper_second
      container_name: zookeeper_second
      ports:
        - 2182:2181
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
        ZOOKEEPER_SERVER_ID: 2
        ZOOKEEPER_SERVERS: "zookeeper_first:22888:23888;zookeeper_second:22888:23888;zookeeper_third:22888:23888"
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - services
      volumes:
        - ./data/zoo_second/data:/var/lib/zookeeper/data
        - ./data/zoo_second/log:/var/lib/zookeeper/log

  zookeeper_third:
      image: confluentinc/cp-zookeeper:7.6.0
      hostname: zookeeper_third
      container_name: zookeeper_third
      ports:
        - 2183:2181
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
        ZOOKEEPER_SERVER_ID: 3
        ZOOKEEPER_SERVERS: "zookeeper_first:22888:23888;zookeeper_second:22888:23888;zookeeper_third:22888:23888"
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - services
      volumes:
        - ./data/zoo_third/data:/var/lib/zookeeper/data
        - ./data/zoo_third/log:/var/lib/zookeeper/log

  kafka_first:
      image: confluentinc/cp-kafka:7.6.0
      hostname: kafka_first
      container_name: kafka_first
      ports:
        - 9091:9091
      depends_on:
        - zookeeper_first
        - zookeeper_second
        - zookeeper_third
      environment:  
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper_first:2181,zookeeper_second:2181,zookeeper_third:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_LISTENERS: INTERNAL://:29092,OUTSIDE://:9091
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_first:29092,OUTSIDE://kafka_first:9091
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
        KAFKA_LOG_DIRS: /var/lib/kafka/logs
      networks:
        - services

  kafka_second:
      image: confluentinc/cp-kafka:7.6.0
      hostname: kafka_second
      container_name: kafka_second
      ports:
        - 9092:9092
      depends_on:
        - zookeeper_first
        - zookeeper_second
        - zookeeper_third
      environment:  
        KAFKA_BROKER_ID: 2
        KAFKA_ZOOKEEPER_CONNECT: zookeeper_first:2181,zookeeper_second:2181,zookeeper_third:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_LISTENERS: INTERNAL://:29092,OUTSIDE://:9092
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_second:29092,OUTSIDE://kafka_second:9092
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
        KAFKA_LOG_DIRS: /var/lib/kafka/logs
      networks:
        - services

  kafka_third:
      image: confluentinc/cp-kafka:7.6.0
      hostname: kafka_third
      container_name: kafka_third
      ports:
        - 9093:9093
      depends_on:
        - zookeeper_first
        - zookeeper_second
        - zookeeper_third
      environment:  
        KAFKA_BROKER_ID: 3
        KAFKA_ZOOKEEPER_CONNECT: zookeeper_first:2181,zookeeper_second:2181,zookeeper_third:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_LISTENERS: INTERNAL://:29092,OUTSIDE://:9093
        KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka_third:29092,OUTSIDE://kafka_third:9093
        KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
        KAFKA_LOG_DIRS: /var/lib/kafka/logs
      networks:
      - services

  kafka_init:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - kafka_first
      - kafka_second
      - kafka_third
    command: >
      /bin/bash -c "
        echo 'Waiting for Kafka to be ready...';
        cub kafka-ready -b kafka_first:9091,kafka_second:9092,kafka_third:9093 1 80;
        kafka-topics --create --if-not-exists --bootstrap-server kafka_first:9091 --topic ads_fetched --partitions 4 --replication-factor 2 --config cleanup.policy=delete;
        kafka-topics --create --if-not-exists --bootstrap-server kafka_first:9091 --topic ad_click --partitions 1 --replication-factor 2 --config cleanup.policy=delete;
        kafka-topics --create --if-not-exists --bootstrap-server kafka_first:9091 --topic ad_impression --partitions 1 --replication-factor 2 --config cleanup.policy=delete;
        echo 'Topics created successfully.';
      "

  # redis_cache:
      # container_name: redis_cache
  #   image: redis:latest
  #   ports:
  #     - 6380:6379
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 30s
  #     retries: 50
  #     start_period: 30s
  #   restart: always
  #   networks:
  #     - services

  # elasticsearch:
  #   container_name: elasticsearch
  #   image: elasticsearch:8.13.0
  #   container_name: elasticsearch
  #   environment:
  #     - node.name=elastic8
  #     - cluster.name=es-docker
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - xpack.security.enrollment.enabled=false
  #   ports:
  #     - 9200:9200
  #   networks:
  #     - services
  #   # command: >
  #   #   bash -c "sleep 30 && \
  #   #   curl -XPUT 'http://localhost:9200/car_ad' -H 'Content-Type: application/json' -d'
  #   #   {
  #   #     \"mappings\": {
  #   #       \"properties\": {
  #   #         \"code\": { \"type\": \"text\" },
  #   #         \"title\": { \"type\": \"integer\" }
  #   #       }
  #   #     }
  #   #   }' && \
  #   #   exit"

  # kibana:
  #     container_name: kibana
  #   image: kibana:8.13.0
  #   container_name: kibana
  #   ports:
  #     - 5601:5601
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #     - cluster.name=es-docker
  #     - node.name=kibana
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - services

  postgres_store:
    container_name: postgres_store
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    ports:
      - 5433:5432
    environment:
      POSTGRES_DB: advertise
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    networks:
      - services

  spark-master:
      container_name: da-spark-master
      build: ./spark/
      image: da-spark-image
      entrypoint: ['/opt/spark/entrypoint.sh', 'master']
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
        interval: 5s
        timeout: 3s
        retries: 3
      volumes:
        - ./spark/book_data:/opt/spark/data
        - ./spark/spark_apps:/opt/spark/apps
        - spark-logs:/opt/spark/spark-events
      env_file:
        - ./spark/.env.spark
      ports:
        - '9090:8080'
        - '7077:7077'
      networks:
        - services

  spark-history-server:
      container_name: da-spark-history
      image: da-spark-image
      entrypoint: ['/opt/spark/entrypoint.sh', 'history']
      depends_on:
        - spark-master
      env_file:
        - ./spark/.env.spark
      volumes:
        - spark-logs:/opt/spark/spark-events
      ports:
        - '18080:18080'
      networks:
        - services

  spark-worker:
      container_name: da-spark-worker
      image: da-spark-image
      entrypoint: ['/opt/spark/entrypoint.sh', 'worker']
      depends_on:
        - spark-master
      env_file:
        - ./spark/.env.spark
      command: 
        - /bin/bash 
        - -x
        - -o 
        - pipefail 
        - -c 
        - |
          /opt/bitnami/scripts/spark/run.sh &
          sleep 10s
          env | cat >> /home/spark_user/docker_env.txt
          echo Spark123@ | sudo -S service ssh start
          wait
      volumes:
        - ./spark/book_data:/opt/spark/data
        - ./spark/spark_apps:/opt/spark/apps
        - spark-logs:/opt/spark/spark-events
      networks:
        - services

volumes:
  postgres-db-volume:
  esdata:
  spark-logs:

networks:
  services:
    name: service_network
    driver: bridge
